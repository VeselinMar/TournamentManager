# Generated by Django 5.2.4 on 2025-07-17 17:39

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the player's name or jersey number.", max_length=100, verbose_name='Player Name')),
                ('goals', models.PositiveIntegerField(default=0, help_text='Total goals scored by the player.', verbose_name='Goals Scored')),
                ('own_goals', models.PositiveIntegerField(default=0, help_text='Total own goals scored by the player.', verbose_name='Own Goals')),
                ('yellow_cards', models.PositiveIntegerField(default=0, help_text='Total yellow cards received by the player.', verbose_name='Yellow Cards')),
                ('red_cards', models.PositiveIntegerField(default=0)),
                ('is_allowed_to_play', models.BooleanField(default=True, help_text='Indicates if the player is allowed to play in the next match.', verbose_name='Allowed to Play')),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Team Name')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='team_logos/', verbose_name='Team Logo')),
                ('tournament_points', models.PositiveIntegerField(default=0, verbose_name='Tournament Points')),
                ('match_points', models.PositiveIntegerField(default=0, verbose_name='Match Points')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_score', models.PositiveIntegerField(default=0)),
                ('away_score', models.PositiveIntegerField(default=0)),
                ('is_finished', models.BooleanField(default=False)),
                ('start_time', models.DateTimeField()),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournamentapp.field')),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='tournamentapp.team')),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='tournamentapp.team')),
            ],
            options={
                'verbose_name': 'Match',
                'verbose_name_plural': 'Matches',
                'ordering': ['start_time'],
                'unique_together': {('home_team', 'away_team', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='MatchEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('goal', 'Goal'), ('yellow_card', 'Yellow Card'), ('red_card', 'Red Card'), ('substitution', 'Substitution'), ('own_goal', 'Own Goal')], help_text='Type of event that occurred during the match.', max_length=20, verbose_name='Event Type')),
                ('minute', models.PositiveIntegerField(blank=True, help_text='Minute in which the event occurred.', null=True, verbose_name='Minute')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the event was created.', verbose_name='Created At')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='tournamentapp.match')),
                ('player', models.ForeignKey(blank=True, help_text='Player involved in the event.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='match_events', to='tournamentapp.player', verbose_name='Player')),
                ('substitute_player', models.ForeignKey(blank=True, help_text='Only for substitutions', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='substitute_entries', to='tournamentapp.player')),
                ('team', models.ForeignKey(help_text='Team involved in the event.', on_delete=django.db.models.deletion.CASCADE, related_name='match_events', to='tournamentapp.team', verbose_name='Team')),
            ],
            options={
                'verbose_name': 'Match Event',
                'verbose_name_plural': 'Match Events',
                'ordering': ['minute', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='GoalEvent',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tournamentapp.matchevent',),
        ),
        migrations.AddField(
            model_name='player',
            name='team',
            field=models.ForeignKey(help_text='Select the team this player belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='players', to='tournamentapp.team', verbose_name='Team'),
        ),
        migrations.AlterUniqueTogether(
            name='player',
            unique_together={('name', 'team')},
        ),
    ]
